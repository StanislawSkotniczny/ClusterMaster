name: CI Pipeline

on:
  push:
    branches: [main, dev, stab]
  pull_request:
    branches: [main, dev, stab]

jobs:
  backend-tests:
    name: Backend Tests & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pylint black flake8

      - name: Run Black formatter check
        working-directory: ./backend
        run: black --check .

      - name: Run Flake8
        working-directory: ./backend
        run: flake8 app/ --max-line-length=100 --exclude=__pycache__

      - name: Run Pylint
        working-directory: ./backend
        run: pylint app/ --disable=C0111,R0903

      - name: Run tests with pytest
        working-directory: ./backend
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term

  frontend-tests:
    name: Frontend Tests & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:unit

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true
