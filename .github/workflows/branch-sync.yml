name: Branch Strategy & Sync

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Source branch"
        required: true
        type: choice
        options:
          - dev
          - stab
          - main
      target_branch:
        description: "Target branch"
        required: true
        type: choice
        options:
          - dev
          - stab
          - main

jobs:
  compare-branches:
    name: Compare Branches
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compare branches
        id: compare
        run: |
          echo "## Branch Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          SOURCE="${{ github.event.inputs.source_branch }}"
          TARGET="${{ github.event.inputs.target_branch }}"

          echo "**Source:** \`$SOURCE\`" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** \`$TARGET\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Commits ahead/behind
          AHEAD=$(git rev-list --count origin/$TARGET..origin/$SOURCE)
          BEHIND=$(git rev-list --count origin/$SOURCE..origin/$TARGET)

          echo "### Commit Status" >> $GITHUB_STEP_SUMMARY
          echo "- üîº \`$SOURCE\` is **$AHEAD commits ahead** of \`$TARGET\`" >> $GITHUB_STEP_SUMMARY
          echo "- üîΩ \`$SOURCE\` is **$BEHIND commits behind** \`$TARGET\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show diffstat
          echo "### File Changes" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          git diff --stat origin/$TARGET...origin/$SOURCE >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Recent commits
          echo "### Recent Commits on $SOURCE" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          git log origin/$SOURCE ^origin/$TARGET --oneline --max-count=10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check for conflicts
        run: |
          SOURCE="${{ github.event.inputs.source_branch }}"
          TARGET="${{ github.event.inputs.target_branch }}"

          echo "### Merge Conflict Check" >> $GITHUB_STEP_SUMMARY

          git checkout origin/$TARGET
          if git merge --no-commit --no-ff origin/$SOURCE 2>&1 | grep -q "CONFLICT"; then
            echo "‚ö†Ô∏è **Merge conflicts detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Conflicting files:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only --diff-filter=U >> $GITHUB_STEP_SUMMARY
            git merge --abort
            exit 1
          else
            echo "‚úÖ **No merge conflicts**" >> $GITHUB_STEP_SUMMARY
            git merge --abort 2>/dev/null || true
          fi

  recommend-action:
    name: Recommend Next Action
    needs: compare-branches
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Create recommendation
        uses: actions/github-script@v7
        with:
          script: |
            const source = '${{ github.event.inputs.source_branch }}';
            const target = '${{ github.event.inputs.target_branch }}';
            const status = '${{ needs.compare-branches.result }}';

            let recommendation = '## üí° Recommended Actions\n\n';

            if (status === 'success') {
              if (source === 'dev' && target === 'stab') {
                recommendation += '‚úÖ Create PR: `dev` ‚Üí `stab` for staging deployment\n';
                recommendation += '- Branch `dev` is ready to be promoted to staging\n';
              } else if (source === 'stab' && target === 'main') {
                recommendation += '‚úÖ Create PR: `stab` ‚Üí `main` for production release\n';
                recommendation += '- After testing on staging, promote to production\n';
              } else if (source === 'dev' && target === 'main') {
                recommendation += '‚ö†Ô∏è  Consider using staging branch first\n';
                recommendation += '- Recommended flow: `dev` ‚Üí `stab` ‚Üí `main`\n';
              }
            } else {
              recommendation += '‚ùå Merge conflicts detected!\n';
              recommendation += '- Resolve conflicts before creating PR\n';
              recommendation += '- Consider rebasing or merging target into source first\n';
            }

            console.log(recommendation);

            core.summary.addRaw(recommendation);
            await core.summary.write();
